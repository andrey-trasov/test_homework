Базовые фильтры
Найди всех авторов с именем «John».
 Author.objects.filter(first_name="John")
<QuerySet [{'first_name': 'John', 'last_name': 'John', 'email': 'asd@gmail.com\n'}, {'first_name': 'John', 'last_name': 'John', 'email': 'qwe@gmail.com'}]>

Найди всех авторов, кроме тех, у кого фамилия «Doe».
 Author.objects.exclude(last_name="Doe")
<QuerySet [{'first_name': 'John', 'last_name': 'John', 'email': 'asd@gmail.com\n'}, {'first_name': 'John', 'last_name': 'John', 'email': 'qwe@gmail.com'}]>

Числовые сравнения
Найди все книги, цена которых меньше 500.
Book.objects.filter(price__lt=500).values()
<QuerySet [{'id': 1, 'title': 'Азбука', 'author_id': 1, 'published_date': datetime.datetime(2020, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('400.00'), 'discount': Decimal('10.00'), 'metadata': {'qwe': 123}}]>

Найди все книги с ценой не более 300.
Book.objects.filter(price__lte=300).values()
QuerySet [{'id': 1, 'title': 'Азбука', 'author_id': 1, 'published_date': datetime.datetime(2020, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('300.00'), 'discount': Decimal('10.00'), 'metadata': {'qwe': 123}}]>

Найди все книги дороже 1000.
Book.objects.filter(price__gt=1000).values()
<QuerySet [{'id': 4, 'title': 'Карта', 'author_id': 3, 'published_date': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}}]>

Найди все книги с ценой от 750 и выше.
Book.objects.filter(price__gte=750).values()
<QuerySet [{'id': 3, 'title': 'Сказки', 'author_id': 2, 'published_date': datetime.datetime(2024, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('800.00'), 'discount': Decimal('3.00'), 'metadata': {'qwe': 123}}, {'id': 4, 'title': 'Карта', 'author_id': 3, 'published_date': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}}]>

Поиск текста
Найди все книги, содержащие слово «django» в названии.
Book.objects.filter(title__contains='django')
<QuerySet [{'id': 4, 'title': 'django', 'author_id': 3, 'published_date': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}}]>

Найди книги, в названии которых есть «python» (без учёта регистра).
Book.objects.filter(title__icontains='python')
QuerySet [{'id': 3, 'title': 'Python', 'author_id': 2, 'published_date': datetime.datetime(2024, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('800.00'), 'discount': Decimal('3.00'), 'metadata': {'qwe': 123}}]>

Найди книги, название которых начинается со слова «Advanced».
Book.objects.filter(title__startswith='Advanced')
<QuerySet [{'id': 2, 'title': 'Advanced_1', 'author_id': 2, 'published_date': datetime.datetime(2020, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('600.00'), 'discount': Decimal('2.00'), 'metadata': {'qwe': 123}}]>

Найди книги, название которых начинается с «pro» (игнорируя регистр).
Book.objects.filter(title__istartswith='pro')
<QuerySet [{'id': 2, 'title': 'PRO Advanced_1', 'author_id': 2, 'published_date': datetime.datetime(2020, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('600.00'), 'discount': Decimal('2.00'), 'metadata': {'qwe': 123}}]>

Найди книги, название которых заканчивается на слово «Guide».
Book.objects.filter(title__endswith='Guide')
<QuerySet [{'id': 1, 'title': 'tutorial Guide', 'author_id': 1, 'published_date': datetime.datetime(2020, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('300.00'), 'discount': Decimal('10.00'), 'metadata': {'qwe': 123}}]>

Найди книги, название которых заканчивается на «tutorial» (без учёта регистра).
Book.objects.filter(title__iendswith='tutorial')
<QuerySet [{'id': 1, 'title': ' Guide tutorial', 'author_id': 1, 'published_date': datetime.datetime(2020, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('300.00'), 'discount': Decimal('10.00'), 'metadata': {'qwe': 123}}]>

Проверка на null
Найди все отзывы без комментариев.
Review.objects.filter(comment=None)
QuerySet [{'id': 3, 'book_id': 2, 'rating': 5, 'comment': None, 'created_at': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc)}, {'id': 4, 'book_id': 1, 'rating': 4, 'comment': None, 'created_at': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc)}]>

Найди все отзывы, у которых есть комментарий.
Review.objects.exclude(comment=None)
<QuerySet [{'id': 1, 'book_id': 1, 'rating': 3, 'comment': 'не очень', 'created_at': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc)}, {'id': 2, 'book_id': 3, 'rating': 4, 'comment': 'отлично\n', 'created_at': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc)}]>

IN и Range
Найди авторов с идентификаторами 1, 3 и 5.
Author.objects.filter(id__in=[1, 2, 5])
<QuerySet [{'id': 1, 'first_name': 'John', 'last_name': 'John', 'email': 'asd@gmail.com\n', 'is_active': True}, {'id': 2, 'first_name': 'John', 'last_name': 'John', 'email': 'qwe@gmail.com', 'is_active': True}, {'id': 5, 'first_name': 'Petya', 'last_name': 'Petrov', 'email': 'wergf@gmail.com', 'is_active': True}]>

Найди книги, опубликованные с 1 января по 31 декабря 2023 года.
from django.db.models import Q
from datetime import datetime
from django.utils import timezone

start_date = timezone.make_aware(datetime(2023, 1, 1))
end_date = timezone.make_aware(datetime(2023, 12, 31, 23, 59, 59))

Book.objects.filter(published_date__range=(start_date, end_date))

<QuerySet [{'id': 4, 'title': 'django', 'author_id': 3, 'published_date': datetime.datetime(2023, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}}]>

Регулярные выражения
Найди книги, название которых начинается со слова «Python».
Book.objects.filter(title__istartswith='Python')
<QuerySet [{'id': 3, 'title': 'Python', 'author_id': 2, 'published_date': datetime.datetime(2024, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('800.00'), 'discount': Decimal('3.00'), 'metadata': {'qwe': 123}}]>

Найди авторов, чья фамилия начинается на «Mc» (игнорируя регистр).
Author.objects.filter(last_name__istartswith='Mc')
<QuerySet [{'id': 2, 'first_name': 'John', 'last_name': 'McJohn', 'email': 'qwe@gmail.com', 'is_active': True}]>

Даты и время
Найди книги, опубликованные в 2024 году.
Book.objects.annotate(year=ExtractYear('published_date')).filter(year=2024).values()
<QuerySet [{'id': 3, 'title': 'Python', 'author_id': 2, 'published_date': datetime.datetime(2024, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('800.00'), 'discount': Decimal('3.00'), 'metadata': {'qwe': 123}, 'year': 2024}]>

Найди книги, опубликованные в июне.
Book.objects.annotate(month=ExtractMonth('published_date')).filter(month=6)
<QuerySet [{'id': 4, 'title': 'django', 'author_id': 3, 'published_date': datetime.datetime(2023, 6, 10, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}, 'month': 6}]>

Найди отзывы, оставленные 11-го числа любого месяца.
Review.objects.annotate(day=ExtractDay('created_at')).filter(day=11).values()
<QuerySet [{'id': 2, 'book_id': 3, 'rating': 4, 'comment': 'отлично\n', 'created_at': datetime.datetime(2021, 11, 11, 21, 0, tzinfo=datetime.timezone.utc), 'day': 10}

Найди книги, опубликованные на 23-й неделе года.
Book.objects.annotate(week=ExtractWeek('published_date')).filter(week=23)
<QuerySet [{'id': 4, 'title': 'django', 'author_id': 3, 'published_date': datetime.datetime(2023, 6, 10, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}, 'week': 23}]>

Найди отзывы, оставленные во вторник.
Review.objects.annotate(weekday=ExtractWeekDay('created_at')).filter(weekday=3)
<QuerySet [{'id': 4, 'book_id': 1, 'rating': 4, 'comment': None, 'created_at': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc), 'weekday': 3}]>

Найди книги, опубликованные во втором квартале года.
Book.objects.annotate(quarter=ExtractQuarter('published_date')).filter(quarter=2)
<QuerySet [{'id': 4, 'title': 'django', 'author_id': 3, 'published_date': datetime.datetime(2023, 6, 10, 21, 0, tzinfo=datetime.timezone.utc), 'price': Decimal('1200.00'), 'discount': Decimal('5.00'), 'metadata': {'qwe': 123}, 'quarter': 2}]>

Найди отзывы, сделанные в определённую дату.
 Review.objects.filter(created_at="2021-11-10 00:00:00+03").values()
<QuerySet [{'id': 4, 'book_id': 1, 'rating': 4, 'comment': None, 'created_at': datetime.datetime(2021, 11, 9, 21, 0, tzinfo=datetime.timezone.utc)}]>

Найди отзывы, сделанные ровно в 15:30.


Найди отзывы, сделанные в 15 часов.


Найди отзывы, сделанные в 30 минут любого часа.


Найди отзывы, созданные в момент, когда секунды были равны 0.


Связанные поля
Найди книги, написанные автором с почтой «author@example.com».


Найди книги авторов, чья фамилия содержит «smith» (без учёта регистра).


Найди авторов, написавших более пяти книг.


JSON-поля
Найди книги, у которых значение ключа «genre» равно «fiction».


Найди книги, где значение ключа «tags» содержит слово «bestseller» (игнорируя регистр).


Использование выражений F и Q
Найди книги, у которых цена равна скидке.


Найди книги, у которых цена больше скидки.


Найди авторов с именем «Alice» или с фамилией, не равной «Brown».


Задания на аннотации
Подсчитай количество книг каждого автора.


Подсчитай средний рейтинг каждой книги.


Посчитай окончательную цену книги (цена минус скидка).


Использование select_related и prefetch_related
Получи список книг и авторов так, чтобы выполнить всего один SQL-запрос.


Получи список авторов и всех их книг так, чтобы было выполнено ровно два SQL-запроса.
